This document contains the setup procedure to test spisniflib component on ARMadeus APF27-dev

Kernel
============

Modification
------------
edit the file in your linux base source : arch/arm/mach-mx2/apf27-dev.c

    - Under this line : "static struct spi_board_info spi_board_info[] __initdata = {"
      You should see something like : #ifdef CONFIG_SPI_SPIDEV
      Replace ".chip_select            = 2," by ".chip_select            = 1," like mcp215x section
    - Then, replace this line "#define SPIDEV_CS (GPIO_PORTD | 17)" by "#define SPIDEV_CS (GPIO_PORTD | 20)"

Configuration
-------------

Enable spidev module and chip select 2 : Please follow this configuration : http://www.armadeus.com/wiki/index.php?title=SPI

Userspace
============

Configuration
-------------

Make sure that your buildroot target system has as_device. Please reffer to:
http://www.armadeus.com/wiki/index.php?title=AsDevices#SPI

Compile test program
-------------

After modification, compile the spi_msg.c file with your buildroot environnement.
This program will send packages through spi thanks to as_spi.

Run test program
-------------

In the root file system, you need:
    - The FPGA design generated by POD
    - spi_msg test program

After booting:
    - modprobe spidev
    - Load the FPGA design via load_fpga
    - Send a packet via spi_msg, example : spi_msg 0xFEED 16
      spi_msg 0x[HEX_DATA] [BIT_COUNT]
    - Then, fpgaregs w 0x18 should give you the number of packets received or 0x8000 if these are empty.
    - fpgaregs w 0x16 give you the bit number in the package.
    - fpgaregs w 0x14 give you the MISO data.
    - fpgaregs w 0x12 give you the MOSI data.
    - Repeat read on 0x14 and 0x12 until all bit number are read.
      Example: If there is 24 bits to read, read twice on MISO and MOSI.

Note : if you modprobe spidev after loading the FPGA design, you probably will have some empty packets.
